#include <windows.h>
#include <glut.h>

//armazena os vértices de um objeto
struct VERTEX {
	int x;
	int y;
};

//armazena a descrição geométrica de um objeto
struct OBJECT {
	VERTEX *vertices;
	int nvertices;
};
OBJECT *object;

OBJECT *create_object() {

	OBJECT *obj = (OBJECT *)malloc(sizeof(OBJECT));

	obj->nvertices = 6;
	obj->vertices = (VERTEX *)malloc(obj->nvertices * sizeof(VERTEX));

	obj->vertices[0].x = 10;
	obj->vertices[0].y = 200;

	obj->vertices[1].x = 40;
	obj->vertices[1].y = 200;

	obj->vertices[2].x = 40;
	obj->vertices[2].y = 50;

	obj->vertices[3].x = 100;
	obj->vertices[3].y = 50;

	obj->vertices[4].x = 100;
	obj->vertices[4].y = 0;

	obj->vertices[5].x = 10;
	obj->vertices[5].y = 0;

	return obj;
}
VERTEX calculate_centroid(OBJECT *obj)
{
	int i;
	VERTEX cent;
	cent.x = 0;
	cent.y = 0;

	for (i = 0; i < obj->nvertices; i++)
	{
		cent.x += obj->vertices[i].x;
		cent.y += obj->vertices[i].y;
	}

	cent.x /= obj->nvertices;
	cent.y /= obj->nvertices;
	return cent;
}

void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
// avisa o OpenGL que todas as futuras alterações, tais como operações 
// de escala, rotação e translação, irão afetar a "câmera" (ou observador),
// e para inicializar o sistema de coordenadas antes da execução de qualquer 
// operação de manipulação de matrizes
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-500.0, 500.0, -500.0, 500.0);
	object = create_object(); //cria o objeto
}

// Função  chamada para fazer o desenho
void desenha(OBJECT* obj) {
//avisar o OpenGl  que todas as futuras alterações, tais como operações
//de escala, rotação e translação, irão afetar os modelos da cena, 
//ou em outras palavras, o que é desenhado
	glMatrixMode(GL_MODELVIEW);
//faz com que a matriz corrente seja inicializada com a matriz identidade	
	glLoadIdentity();
// Limpa a janela de visualização com a cor de fundo especificada
	glClear(GL_COLOR_BUFFER_BIT);
// Criação da imagem principal em verde
	glBegin(GL_LINE_LOOP);
	glColor3f(0.0, 1.0, 0.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2i(obj->vertices[i].x, obj->vertices[i].y);

		glPopMatrix();

	}


	glEnd();

	glEndList();

	// Exercício 1 (vermelho):

	glBegin(GL_LINE_LOOP);

	glColor3f(1.0, 0.0, 0.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2i((obj->vertices[i].x) * (-1), obj->vertices[i].y);

		glPopMatrix();

	}

	glEnd();

	glEndList();

	glTranslatef(100.0, 0, 0);
	// Exercício 3 ( azul ):

	glBegin(GL_LINE_LOOP);

	glColor3f(0.0, 0.0, 1.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2f((obj->vertices[i].x) * (0.5), (obj->vertices[i].y)* (0.5));

		glPopMatrix();

	}

	glEnd();

	glEndList();
	//Exercicio 2 ( Roxo claro) :
	glTranslatef(100.0, 0.0, 0);
	glBegin(GL_LINE_LOOP);

	glColor3f(0.5, 0.5, 1.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2f((obj->vertices[i].y), (obj->vertices[i].x));

		glPopMatrix();

	}

	glEnd();

	glEndList();


	glTranslatef(-100.0, -250.0, 0);
	// Exercício 4 ( rosa ):

	glBegin(GL_LINE_LOOP);

	glColor3f(1.0, 0.0, 1.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2f((obj->vertices[i].x) + (obj->vertices[i].y) * 0.58, (obj->vertices[i].y));

		glPopMatrix();

	}

	glEnd();

	glEndList();
	glTranslatef(-300.0, 0, 0);
	// Exercicio 5 (amarelo): 

	glBegin(GL_LINE_LOOP);

	glColor3f(1.0, 1.0, 0.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2f((obj->vertices[i].x)*0.87 + (obj->vertices[i].y)*-0.5, (obj->vertices[i].x)*0.5 + (obj->vertices[i].y)*0.87);

		glPopMatrix();

	}

	glEnd();

	glEndList();
	glTranslatef(200.0, 0, 0);
	// Exercicio 6 (ciano): 
	glBegin(GL_LINE_LOOP);

	glColor3f(0.0, 1.0, 1.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2f((obj->vertices[i].x)*0.71*0.75 + (obj->vertices[i].y)*-0.71*0.75, (obj->vertices[i].x)*0.71*0.75 + (obj->vertices[i].y)*0.71*0.75);

		glPopMatrix();

	}

	glEnd();

	glEndList();

	// Exercicio 7 (ciano): 
	glBegin(GL_LINE_LOOP);

	glColor3f(1.0, 1.0, 1.0);

	for (int i = 0; i<6; i++) {

		glPushMatrix();

		glVertex2f((obj->vertices[i].x) + (obj->vertices[i].y)*0.47, (obj->vertices[i].y)*-1);

		glPopMatrix();

	}

	glEnd();

	glEndList();

	glFlush();


}
void display(void)
{
	desenha(object);
}
// Inicializa parâmetros de rendering
void Inicializa() {
	// Define a cor de fundo da janela de visualização como preta
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
}
// Função callback chamada quando o tamanho da janela é alterado
void AlteraTamanhoJanela(GLsizei w, GLsizei h) {
	// Evita a divisao por zero
	if (h == 0) h = 1;
	// Especifica as dimensões da Viewport
	glViewport(0, 0, w, h);
	// Inicializa o sistema de coordenadas
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	// Estabelece a janela de seleção (left, right, bottom, top)
	if (w <= h)
		gluOrtho2D(-500.0f, 500.0f, -500.0f, 500.0f*h / w);
	else
		gluOrtho2D(-500.0f, 500.0f*w / h, -500.0f, 500.0f);
}
// Programa Principal
int main() {
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(800, 800);
	glutInitWindowPosition(10, 10);
	glutCreateWindow("Exercicio Malvezzi");
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(AlteraTamanhoJanela);
	Inicializa();
	glutMainLoop();
}
/* void glGenVertexArrays(GLsizei n, GLuint *arrays);
Retorna n nomes atualmente não utilizados para uso como objetos de matriz de vértices nas matrizes de matriz. 
Os nomes retornados são marcados como usados para fins de alocação de objetos de buffer adicionais e inicializados 
com valores que representam o estado padrão da coleção de arrays de vértices não inicializados. */
/*
void glBindVertexArray(matriz GLuint);
glBindVertexArray() faz três coisas. Ao usar a matriz de valor que
é diferente de zero e foi retornado de glGenVertexArrays(), um novo
o objeto vertex-array é criado e recebe esse nome. Ao vincular a um objeto de matriz de 
vértices criado anteriormente, esse objeto de matriz de vértices se torna ativo, o que 
também afeta o estado da matriz de vértices armazenado no objeto. Ao vincular a um valor
 de matriz de zero, o OpenGL para de usar objetos de matriz de vértices alocados pelo
 aplicativo e retorna ao estado padrão para matrizes de vértices.
Um erro GL_INVALID_OPERATION é gerado se a matriz não for um valor
previamente retornado de glGenVertexArrays(), ou se for um valor que foi 
liberado por glDeleteVertexArrays().
*/